<!DOCTYPE html>
<html lang="en-AU">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="initial-scale=1, minimum-scale=1" />
<title>De Casteljau's Algorithm Demo &bull; Timing Demo</title>
<style type="text/css">
/** Reset.css */
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none!important}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:0}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 2.5em}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}

*{
	tab-size: 4;
	-webkit-box-sizing:	border;
	-webkit-box-sizing:	border-box;
	-moz-box-sizing:	border;
	-moz-box-sizing:	border-box;
	box-sizing:			border-box;
}
	:focus{outline: none}


/** Main.css */
html, body{
	position: absolute;
	overflow: hidden;
	top:	0;
	left:	0;
	right:	0;
	bottom:	0;
}

html{
	background: #eee;
}

body{
	background: #fff;
	box-shadow: 0 0 .5em rgba(0,0,0,.27);
	margin: 1em;
	overflow: visible;
}

.ball{
	position: absolute;
	font-size: 2em;
	width:	1em;
	height:	1em;
	background: #f00;
	margin: -.5em 0 0 -.5em;
	top:	20%;
	left:	40%;
	border-radius: 50%;
	box-shadow: inset -.125em -.125em .5em rgba(0,0,0,.55);
}
	.ball + .ball{
		transition: 4s top cubic-bezier(0,.98,1,0);
		background-color: #0d0;
		left: 60%;
	}
	.ball.drop{
		top: 80%;
	}

</style>
</head>


<body>
	
	<div class="ball"></div>
	<div class="ball"></div>


	<script type="application/javascript" src="src/js/tween.js"></script>
	<script type="application/javascript">
		"use strict";


		var balls		=	document.getElementsByClassName("ball"),
			target		=	balls[0].style,
			dataPlot	=	[],
			duration	=	2000,
			timeStarted,
			timeFinished,
			points		=	[
				[0,		0],
				[0,		0.98],
				[1,		0],
				[1,		1]
			];


		function go(){
			dataPlot	=	dataPlot.length ? [] : dataPlot;
			timeStarted	=	performance.now();

			/** Mirror the current tweening parameters on the ball using the CSS-controlled transition. */
			balls[1].style.transitionDuration		=	duration + "ms";
			balls[1].style.transitionTimingFunction	=	"cubic-bezier(" + points.slice(1,3).join(",") + ")";
			balls[1].classList.add("drop");



			/** Get the ball rolling (hurr). */
			new Tween({
				target:		balls[0].style,
				property:	"top",
				curve:		points,

				from:		20,
				to:			80,
				suffix:		"%",
				duration:	duration,


				/** Add calculated value to our plot of logged data */
				onStep:		function(progress, value){
					dataPlot.push([progress, value]);
				},


				/** Callback executed when finished */
				onDone:		function(){
					console.log("Done!");
					dataPlot		=	JSON.stringify(dataPlot);
					timeFinished	=	performance.now();
					console.log("Time in milliseconds: " + (timeFinished - timeStarted));
				}
			});
		}

	</script>
</body>
</html>
